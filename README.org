* Table of Contents                                                    :TOC:
- [[#about][About]]
  - [[#prologue][Prologue]]
  - [[#introduction][Introduction]]
  - [[#technical-designs][Technical Designs]]
- [[#installation][Installation]]
  - [[#dependencies][Dependencies]]
- [[#manual][Manual]]
  - [[#core-functionality][Core Functionality]]
  - [[#search-engine][Search Engine]]
  - [[#emacs-ui][Emacs UI]]
  - [[#http-api][HTTP API]]

* About

** Prologue

Back to the time when I was preparing the final examinations as a bachelor student. I wrote down all the concepts to a big white paper in a structured way in order to review what I have learned. I draw lines between concepts and labeled the relationship. For each concept, I wrote some text describing it (usually the paper was too small for large trunk of text).

After Emacs and its decent Org Mode became best partner for my electronic life, I always wanted a software that helps me record everything in a structured way, like described above.

I want a software that has the following characteristics:
- Data are stored in a format that is transferable and can be easily parsed by any programming language.
- Data are transparent to the user and are easily hackable.
- Feature rich yet user-friendly search function.
- Convenience to access and manipulate the data in multiple platforms and scenarios.
- Good performance.

I decided to roll my own.

** Introduction

Silver Brain is a [[https://www.thebrain.com/][Brain]] like software and was initially inspired by [[https://github.com/Kungsgeten/org-brain][org-brain]]. It helps you build your very own personal knowledge center.

It has the following features:

- Emacs UI for all the functionality mentioned below.
- Data are stored in different workspaces that guarantee complete data isolation.
- An item (thought in the /Brain/ software) can store anything, including texts, hyper links, documents, images etc.
- An item may have custom properties (key/value pairs) that grant you super power to implement your own data classification system or a simple tagging mechanism.
- Items can be linked to consist a leveled graph of nodes.
- Items can reference each other with textual annotations in a free form.
- A comprehensive search engine that supports both basic text match and advanced search functions such as property match, glob patterns and more.

** Technical Designs

- Each workspace is a folder.
- Items are stored in a SQLite database.
- It works in a C/S architecture. You may implement your own client if you wish.
- Back-end code was written in Elixir.
  (It was originally written in Common Lisp yet I found Elixir a very acceptable Lisp.)

Please refer to [[./CHANGELOG.org][CHANGELOG.org]].

* Installation

** Dependencies

Make sure ~SQLite 3~ is installed on your system.

And you need Elixir compiler if you want to compile the server code.

* Manual

** Core Functionality

*** Workspace

The workspace is the unit of a complete data set. Data stored in different workspaces cannot be shared and are completely isolated.

All the content below assumes that a single workspace is active.

*** Item

An item is the fundamental unit to store any information. It has the following properties:
- =id=. Globally unique unchangeable identifier.
- =name=. The name/title/subject.
- =content-type=. The content type of this item.
  - For Org notes the value should be =text/org= or =application/org=.
  - For Markdown notes the value should be =text/markdown=.
  - For hyper links the value should be =application/x.silver-brain.hyper-link=.
  - For multi-media types it should be the registered MIME values.
- =content=. The content of this item.
- =create-time=. The UTC time when this item was created. Unchangeable.
- =update-time=. The UTC time when this item was last modified.
  Note that only changes to the properties mentioned above will modify it.

*** Item Link

A link indicates the hierarchical relationship between 2 items, which is considered "parent" or "child" respectively.

For example, a /Travel Plan/ may contain multiple /Airplane Tickets/ and /Hotel Reservations/.

It is forbidden for an item to become a parent and a child of another item at the same time.

*** Item Reference

Items may reference each other to add supplementary information. A reference may contain annotation and has no requirement upon the source and target items.

For example, a /Travel Plan/ mentioned above may reference an item of destination country.

*** Item Property

An item may contain multiple custom properties that is treated and stored as key-value pairs.

** Search Engine

A simple yet powerful search engine is designed to search it.

#+BEGIN_SRC ebnf
  <query> ::= <simple-query> | <logical-query> | <property-query>

  <simple-query> ::= <basic-string> | <glob-string>
  <basic-string> ::= <simple-string> | <quoted-string>
  <simple-string> ::= [^" ]
  <quoted-string> ::= "\"" (<character> | "\\" | "\"") "\""
  <glob-string> ::= ("*"?) <basic-string> ("*"?)

  <logical-query> ::= <not-query> | <and-query> | <or-query> | <grouped-query>
  <not-query> ::= "!" <query>
  <and-query> ::= <query> ("&&" | <space>) <query>
  <or-query> ::= <query> "||" <query>
  <grouped-query> ::= "(" <query> ")"

  <property-query> ::= <basic-string> <property-op> <glob-string>
  <property-op> ::= ":" | "<" | "<=" | ">=" | ">"
#+END_SRC

** Emacs UI

|---------+---------+-------------|
| Command | Binding | Description |
|---------+---------+-------------|
| TBD     |         |             |
|---------+---------+-------------|

** HTTP API

Unless specified, the following rules apply to all the endpoints:
- The endpoints should be prefixed with =/api/v2=, which is omitted in this section.
- HTTP header =X-SB-Store= is used to specify the name of workspace.
- GET endpoints return =200 OK= on success.
- GET endpoints return =400 Not Found= when the resource is not found.
- POST endpoints return =201 Created= on success. The body is ={"id": "xxx"}= for newly created resource.
- POST endpoints return =400 Bad Request= when the JSON payload is invalid.
- PATCH endpoints return =204 No Content= on success.
- PATCH endpoints return =400 Bad Request= when the JSON payload is invalid.
- DELETE endpoints return =204 No Content= on success.

The POST body is a JSON payload. The value of a property should be a string unless specified.

Unless specified, 

*** =GET /items/:id=

*** =POST /items=

Body:
- =name=. Required.
- =contentType= and =content=. Optional.

*** =PATCH /items=

*** =DELETE /items=

*** =GET /item-references=

*** =POST /item-references=

*** =PATCH /item-references/:id=

*** =DELETE /item-references/:id=
